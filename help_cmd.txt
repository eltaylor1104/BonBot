    @slash.command(name='help', description='see what I can do!', guild_ids=test_ids)
    async def help_slash(self, ctx: SlashInteraction):
        buttons = ActionRow(
            Button(style=ButtonStyle.blurple, 
            label="Fun Commands",
            custom_id="fun"),
            Button(style=ButtonStyle.blurple,
            label="Utility Commands",
            custom_id="utility"),
            Button(style=ButtonStyle.blurple,
            label="Moderation Commands",
            custom_id="mod"))

        msg = await ctx.send("I have a button!", components=[buttons])

        # Here timeout=60 means that the listener will
        # finish working after 60 seconds of inactivity
        on_click = msg.create_click_listener(timeout=60)

        @on_click.not_from_user(ctx.author, cancel_others=True, reset_timeout=False)
        async def on_wrong_user(inter):
            # Reply with a hidden message
            await inter.reply("You're not the author", ephemeral=True)

        @on_click.matching_id("fun")
        async def on_fun_button(inter):
            await inter.reply("You've clicked the `fun` button!")

        @on_click.matching_id("utility")
        async def on_utility_button(inter):
            await inter.reply("You've clicked the `utility` button!")

        @on_click.matching_id("mod")
        async def on_mod_button(inter):
            await inter.edit("You've clicked the `mod` button!")

        @on_click.timeout
        async def on_timeout():
            await msg.edit(components=[])



import os

import discord
import dislash
import DiscordUtils
import jishaku
from discord.ext import commands
from dislash import *
from jishaku.codeblocks import Codeblock, codeblock_converter

bot = commands.Bot(intents=discord.Intents.all(), command_prefix="s!")
slash = SlashClient(bot)
test_ids = [804935799316676629] # Put your server ID in this array

class owner(commands.Cog):

    def __init__(self, bot):
        self.bot = bot
    
'''
    @slash_commands.command(name='load', description="owner only", options=[Option("cog", "a cog to load", Type.STRING, required=True)], default_permissions=False)
    @slash_commands.is_owner()
    async def load(self, ctx, *, cog: str):
        """Command which Loads a Module.
        Remember to use dot path. e.g: cogs.owner"""
        try:
            self.bot.load_extension(f'cogs.{cog}')
        except Exception as e:
            await ctx.send(f'**`ERROR:`** {type(e).__name__} - {e}', ephemeral=True)
        else:
            await ctx.send(f'üì• **`{cog}`**', ephemeral=True)

    @slash_commands.command(name='unload', description="unload a cog", options=[Option("cog", "a cog to unload", Type.STRING, required=True)], default_permissions=False)
    @slash_commands.is_owner()
    async def unload(self, ctx, *, cog: str):
        """Command which Unloads a Module.
        Remember to use dot path. e.g: cogs.owner"""

        try:
            self.bot.unload_extension(f'cogs.{cog}')
        except Exception as e:
            await ctx.send(f'**`ERROR:`** {type(e).__name__} - {e}', ephemeral=True)
        else:
            await ctx.send(f'üì§ **`{cog}`**', ephemeral=True)

    @slash_commands.command(name='reload', description='reload a cog', options=[Option("cog", "a cog to unload", Type.STRING, required=True)], default_permissions=False)
    @slash_commands.is_owner()
    async def reload(self, ctx, *, cog: str):
        """Command which Reloads a Module.
        Remember to use dot path. e.g: cogs.owner"""

        try:
            self.bot.unload_extension(f'cogs.{cog}')
            self.bot.load_extension(f'cogs.{cog}')
        except Exception as e:
            await ctx.send(f'**`ERROR:`** {type(e).__name__} - {e}', ephemeral=True)
        else:
            await ctx.send(f'üîÅ **`{cog}`**', ephemeral=True)

    @slash_commands.command(name='servers', description='view all servers that I am in', default_permissions=False)
    @slash_commands.is_owner()
    async def guilds(self, ctx):
        em1 = discord.Embed(title=  "Guilds [1 - 20]", color = ctx.author.color, description = "The first 20 guilds of BonBot")
        em2 = discord.Embed(title=  "Guilds [20 - 40]", color = ctx.author.color, description = "The next 20 guilds of BonBot")
        em3 = discord.Embed(title=  "Guilds [40 - 60]", color = ctx.author.color, description = "The last 20 guilds of BonBot")
        for i in range(0, len(self.bot.guilds)):
            guild = self.bot.guilds[i]
            if i < 20:
                em1.add_field(name = f"{guild.name}", value = f"```diff\n+ ID: {guild.id}\n+ Owner: {guild.owner}\n- Members: {guild.member_count}```")
            elif i > 20 and i < 40:
                em2.add_field(name = f"{guild.name}", value = f"```diff\n+ ID: {guild.id}\n+ Owner: {guild.owner}\n- Members: {guild.member_count}```")
            else:
                em3.add_field(name = f"{guild.name}", value = f"```diff\n+ ID: {guild.id}\n+ Owner: {guild.owner}\n- Members: {guild.member_count}```")
        paginator = DiscordUtils.Pagination.AutoEmbedPaginator(ctx)
        embeds = [em1, em2, em3]
        await paginator.run(embeds)
'''

def setup(bot):
    bot.add_cog(owner(bot))



